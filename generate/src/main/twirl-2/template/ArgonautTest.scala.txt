@import andxor.syntax._

@()

import andxor.scalacheck._
import _root_.argonaut._
import _root_.argonaut.Argonaut._
import org.scalacheck.{Arbitrary, Prop, Properties}
import org.scalacheck.Prop.{forAllNoShrink, propBoolean}

@tpeLists = @{ mkTpeList(1, maxLen) }
@ccName(ts: List[String]) = { Test@{ts.length} }
@ccTpe(i: Int) = @{ List("Int", "String", "Boolean").apply(i % 3) }

object ArgonautTest extends Properties("argonaut") {
  private def registerProp(name: String)(prop: => Prop): Unit =
    property.update(name, prop): Unit

  @tpeLists.map { tpes =>
  @@derives(Arbitrary, DecodeJson, EncodeJson)
  case class @{ccName(tpes)}(@{tpes.zipWithIndex.map(t => ccTpe(t._2)).paramSig("x")})

  registerProp("@{ccName(tpes)}")(forAllNoShrink { (t: @{ccName(tpes)}) =>
    val axoCodec = CodecJson.derived[@{ccName(tpes)}]
    val argCodec = casecodec@{tpes.length}(@{ccName(tpes)}.apply, @{ccName(tpes)}.unapply)(@{tpes.paramList("x").map(t => s""""$t"""").mkString(", ")})

    val axoEncoded = axoCodec.encode(t)
    val argEncoded = argCodec.encode(t)

    val axoDecoded = axoCodec.decodeJson(axoEncoded)
    val argDecoded = argCodec.decodeJson(axoEncoded)

    ((axoEncoded == argEncoded) :| "encoded json was different") &&
      ((axoDecoded == argDecoded) :| "decoded json was different")
  })
  }
}
