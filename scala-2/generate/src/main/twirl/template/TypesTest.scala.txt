@import andxor.syntax._
@import play.twirl.api.TwirlFeatureImports.defining

@(tpeLists: List[List[String]])

import andxor.AndXorProperties.arbitrary._
import andxor.types._
import org.scalacheck.{Arbitrary, Properties}
import cats.{Applicative, Eq, Functor}
import cats.kernel.laws.discipline.MonoidTests
import monocle.law.discipline.LensTests

object arbitrary {
  @tpeLists.map { tpes =>
    implicit def prod@{tpes.length}Arb[F[_], @tpes.tpeParams](implicit @{tpes.paramSig(List("Arbitrary", "F"), "a")}): Arbitrary[@tpes.prodTpe] =
      AndXor[@tpes.tpeParams].deriving[Arbitrary, F].apply

    implicit def cop@{tpes.length}Arb[F[_], @tpes.tpeParams](implicit @{tpes.paramSig(List("Arbitrary", "F"), "a")}): Arbitrary[@tpes.copTpe] =
      AndXor[@tpes.tpeParams].deriving[Arbitrary, F].alt

    implicit def prod@{tpes.length}Eq[F[_], @tpes.tpeParams](implicit @{tpes.paramSig(List("Eq", "F"), "e")}): Eq[@tpes.prodTpe] =
      AndXor[@tpes.tpeParams].deriving[Eq, F].divide

    implicit def cop@{tpes.length}Eq[F[_], @tpes.tpeParams](implicit @{tpes.paramSig(List("Eq", "F"), "e")}): Eq[@tpes.copTpe] =
      AndXor[@tpes.tpeParams].deriving[Eq, F].choose
  }
}

@tpeLists.map { _tpes => @defining(_tpes.zipWithIndex.map(t => if (t._2 % 2 == 0) "String" else "Int")) { tpes =>
  object @{tpes.prodName}Test extends Properties("@{tpes.prodName}") {
    import arbitrary._

    include(AndXorProperties.ftraverse.laws[@tpes.prodTpeF("*[_]"), Applicative])

    include(MonoidTests[@tpes.prodTpeF("Option")].monoid.all)

    @tpes.zipper { z =>
      include(LensTests[@tpes.prodTpeF("Option"), Option[@{tpes(z.index)}]](
        @{tpes.prodName}.@{tpes.prodName}Lens@{z.index}[Option, @{tpes.tpeParams}]).all, "@{z.index}.")
    }
  }

  object @{tpes.copName}Test extends Properties("@{tpes.copName}") {
    import arbitrary._

    include(AndXorProperties.ftraverse.laws[@tpes.copTpeF("*[_]"), Functor])
  }
}}
