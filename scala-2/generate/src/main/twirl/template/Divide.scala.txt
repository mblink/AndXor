@import andxor.syntax._

@(tpes: List[String])
  def divide@{tpes.length}[F[_], @{tpes.tpeParams}, Z](@{tpes.paramSig("=>F", "a")})(
    f: Z => @{tpes.prod}
  )(implicit D: Divide[F]): F[Z] = D.divide2(
    @{tpes.paramList("a").head}, @{
      tpes.paramList("a").tail.reduceRight((e, a) => s"D.tuple2(${e}, ${a})")}) { z =>
    val t = f(z)
    @{tpes.paramList("a").zipWithIndex.map(x => s"t${tpes.tupleAccess(x._2 + 1)}").reduceRight((e, a) =>
      s"(${e}, ${a})")}
  }
