@(tpeLists: List[List[String]])

import cats.{Apply, Id}
import monocle.{Lens, Optional}

trait AndXorCopDeriving[TC[_], Cop] {
  def mkChoose[B](f: B => Cop)(implicit d: Decidable[TC]): TC[B]
  def mkAlt[B](f: Cop => B)(implicit a: Alt[TC]): TC[B]
  final def choose(implicit d: Decidable[TC]): TC[Cop] = mkChoose(identity _)
  final def alt(implicit a: Alt[TC]): TC[Cop] = mkAlt(identity _)
}

trait AndXorProdDeriving[TC[_], Prod] {
  def mkDivide[B](f: B => Prod)(implicit a: Divide[TC]): TC[B]
  def mkApply[B](f: Prod => B)(implicit a: Apply[TC]): TC[B]
  final def divide(implicit d: Divide[TC]): TC[Prod] = mkDivide(identity _)
  final def apply(implicit a: Apply[TC]): TC[Prod] = mkApply(identity _)
}

trait AndXorDeriving[TC[_], Cop, Prod] extends AndXorCopDeriving[TC, Cop] with AndXorProdDeriving[TC, Prod]

trait AndXor { self =>
  type Cop[F[_]]
  type Prod[F[_]]

  def inj[F[_], A](a: A)(implicit inj: Inj[Cop[F], A]): Cop[F] = inj(a)
  def injId[A](a: A)(implicit inj: Inj[Cop[Id], Id[A]]): Cop[Id] = inj(a)
  def lift[F[_], A](a: A)(implicit inj: Inj[Prod[F], A]): Prod[F] = inj(a)
  def liftId[A](a: A)(implicit inj: Inj[Prod[Id], Id[A]]): Prod[Id] = inj(a)
  def extractC[F[_], B](c: Cop[F])(implicit l: Optional[Cop[F], B]): Option[B] = l.getOption(c)
  def extractP[F[_], B](p: Prod[F])(implicit l: Lens[Prod[F], B]): B = l.get(p)

  def derivingNestedCop[TC[_], F[_]](implicit dc: DerivingCop[Cop, F, TC]): DerivingCop[Cop, F, TC] = dc
  def derivingNestedProd[TC[_], F[_]](implicit dp: DerivingProd[Prod, F, TC]): DerivingProd[Prod, F, TC] = dp
}

object AndXor {
  @tpeLists.map(template.txt.Build(Nil, _, false))
}
