@import andxor.syntax._

@(tpes: List[String])

import andxor.types._
@tpes.foldLen01("")("import andxor.syntax.ffunctor._\nimport andxor.syntax.ftraverse._\nimport cats.syntax.either._")
import cats.{@{(tpes.foldLen01(List[String]())(List("~>", "Applicative", "Functor", "MonoidK")) ::: List("Apply", "Id")).sorted.mkString(", ")}}

@axoDeriving(cop: String, prod: String) = {
  new AndXorDeriving[TC, Cop[F], Prod[F]] {
    def mkChoose[B](f: B => Cop[F])(implicit d: Decidable[TC]): TC[B] =
      @tpes.foldLen01("d.contramap(t0)(f(_).run)")(s"Combine.choose${tpes.length}(${
        tpes.paramList("t").mkString(", ")})(f(_).run)")

    def mkAlt[B](f: Cop[F] => B)(implicit a: Alt[TC]): TC[B] =
      @tpes.foldLen01(s"a.map(t0)(x => f(${cop}(x)))")(s"Combine.altly${tpes.length}(${
        tpes.paramList("t").mkString(", ")})(x => f(${cop}(x)))")

    def mkDivide[B](f: B => Prod[F])(implicit a: Divide[TC]): TC[B] =
      @tpes.foldLen01(s"a.contramap(t0)(f(_).run)")(s"Combine.divide${tpes.length}(${tpes.paramList("t").mkString(", ")})(f(_).run)")

    def mkApply[B](f: Prod[F] => B)(implicit a: Apply[TC]): TC[B] =
      @tpes.foldLen01[Any](s"a.map(t0)(x => f(${prod}(x)))") {
      Combine.apply@{tpes.length}(@{tpes.paramList("t").mkString(", ")}) {
        case @{tpes.paramList("i").mkTuple} =>
          f(@{prod}(@{tpes.paramList("i").mkTuple}))
      }
      }
  }
}

trait AndXorNested@{tpes.length}[@{tpes.nestedTpeParams}] extends AndXor {
  @if(tpes.length < maxLen) {
  def *:[B](@@annotation.unused a: AndXor1[B]): @{(List("B").const ::: tpes).nestedBuiltAndXor} = @{(List("B").const ::: tpes).nestedBuiltAndXor}
  def *:[B[_[_]]](@@annotation.unused a: AndXorNested1[B]): @{("B" :: tpes).nestedBuiltAndXor} = @{("B" :: tpes).nestedBuiltAndXor}
  }

  @mkTpeList(1, maxLen - tpes.length, "B").map(template.txt.Build(tpes, _, true))

  type Prod[F[_]] = @{tpes.nestedProdTpe()}
  object Prod {
    def apply[F[_]](p: @{tpes.nestedTpes().prod}): Prod[F] = @tpes.foldLen01("p")(tpes.nestedProdTpe() ++ "(p)")
  }

  type Cop[F[_]] = @{tpes.nestedCopTpe()}
  object Cop {
    def apply[F[_]](c: @{tpes.nestedTpes().dj}): Cop[F] = @tpes.foldLen01("c")(tpes.nestedCopTpe() ++ "(c)")
  }

  @if(tpes.length > 1) {
    object instances {
      implicit def axo@{tpes.prodName}Instance@{tpes.ftraverseParams("Applicative").asImpls(false)}: FFunctor[Prod] with FTraverseProd[Prod] =
        new FFunctor[Prod] with FTraverseProd[Prod] {
          def map[F[_], G[_]](p: @tpes.nestedProdTpe())(nt: F ~> G): @tpes.nestedProdTpe("G") =
            @{tpes.nestedProdTpe("G")}(@{tpes.paramListF(i =>
              tpes.foldLen01((s: String) => s"nt($s)")(s => s"ft$i.map($s)(nt)")(s"p${tpes.prodAccess(i + 1)}")).mkTuple})

          def traverse[F[_], G[_], A[_]: Applicative](p: @tpes.nestedProdTpe())(f: F ~> Lambda[a => A[G[a]]]): A[@{tpes.nestedProdTpe("G")}] =
            @tpes.paramListF(i => s"ft$i.traverse(p${tpes.prodAccess(i + 1)})(f)").tail.foldLeft(
              s"Applicative[A].map(${tpes.foldLen01(s"f(p${tpes.prodAccess(1)})")(s"ft0.traverse(p${tpes.prodAccess(1)})(f)")})(${tpes.nestedTpes("G").paramSigArgs("i")
                .map(parens).mkString(" => ")} => ${tpes.nestedProdTpe("G")}(${tpes.paramList("i").mkTuple}))")(
                  (a, e) => s"Applicative[A].ap($a)($e)")
        }

      implicit def axo@{tpes.prodName}FoldMap@{tpes.foldMapParams.asImpls(false)}: FoldMap[Prod, Cop] =
        new FoldMap[Prod, Cop] {
          def emptyProd[F[_]](implicit PE: MonoidK[F]): Prod[F] =
            Prod(@{tpes.zipWithIndex.map(t => s"fm${t._2}.emptyProd").mkTuple})

          def unconsAll[F[_], G[_]](p: @{tpes.nestedProdTpe()})(implicit U: Uncons[F, G]): (List[@{tpes.nestedCopTpe("G")}], @{tpes.nestedProdTpe()}) = {
            @{1.to(tpes.length).toList.map(i => s"val (h$i, t$i) = ${tpes.foldLen01("U")(s"fm${i - 1}.unconsAll")}(p${tpes.prodAccess(i)})").mkString("\n      ")}
            (List(@{1.to(tpes.length).toList.map(i => s"h$i.map(Inj[${tpes.nestedCopTpe("G")}, ${tpes.nestedTpes("G")(i - 1)}].apply(_))").mkString(", ")}).flatten,
              @{tpes.nestedProdTpe()}(@{1.to(tpes.length).toList.map(i => s"t$i").mkTuple}))
          }

          def unconsOne[F[_], G[_]](p: @{tpes.nestedProdTpe()}, c: @{tpes.nestedCopTpe("G")})(implicit U: Uncons[F, G]): (Option[@{tpes.nestedCopTpe("G")}], @{tpes.nestedProdTpe()}) =
            c.run match {
              @{tpes.zipper(FoldMap(_, true)).mkString("").dropWhile(_ == ' ')}
            }
        }

      implicit def axo@{tpes.copName}Instance@{tpes.ftraverseParams("Functor").asImpls(false)}: FFunctor[Cop] with FTraverseCop[Cop] =
        new FFunctor[Cop] with FTraverseCop[Cop] {
          def map[F[_], G[_]](c: @tpes.nestedCopTpe())(nt: F ~> G): @tpes.nestedCopTpe("G") =
            @{tpes.nestedCopTpe("G")}(@{tpes.foldLen01("nt(c.run)")(
              s"c.run${tpes.tail.foldRight("_.map(nt)")((_, a) => s"_.bimap(_.map(nt), $a)").tail}")})

          def traverse[F[_], G[_], A[_]: Functor](c: @tpes.nestedCopTpe())(f: F ~> Lambda[a => A[G[a]]]): A[@{tpes.nestedCopTpe("G")}] =
            c.run match {
              @tpes.zipper(SequenceC(_, true))
            }
        }
    }
  }

  def deriving[TC[_], F[_]](implicit @{tpes.map(t => s"TC[$t[F]]").paramSig("t")}): AndXorDeriving[TC, Cop[F], Prod[F]] =
    @axoDeriving(tpes.nestedCopTpe(), tpes.nestedProdTpe())

  def derivingId[TC[_]](implicit @{tpes.map(t => s"TC[$t[Id]]").paramSig("t")}): AndXorDeriving[TC, Cop[Id], Prod[Id]] = deriving[TC, Id]
}

object AndXorNested@{tpes.length} {
  def apply[@{tpes.nestedTpeParams}]: AndXorNested@{tpes.length}[@{tpes.tpeParams}] =
    new AndXorNested@{tpes.length}[@{tpes.tpeParams}] {}
}

trait AndXor@{tpes.length}[@{tpes.tpeParams}] extends AndXor {
  @if(tpes.length < maxLen) {
  def *:[B](@@annotation.unused a: AndXor1[B]): @{("B" :: tpes).builtAndXor} = @{("B" :: tpes).builtAndXor}
  def *:[B[_[_]]](@@annotation.unused a: AndXorNested1[B]): @{("B" :: tpes.const).nestedBuiltAndXor} = @{("B" :: tpes.const).nestedBuiltAndXor}
  }

  @mkTpeList(1, maxLen - tpes.length, "B").map(template.txt.Build(tpes, _, false))

  type Prod[F[_]] = @{tpes.prodTpe}
  object Prod {
    def apply[F[_]](p: @{tpes.prodK("F")}): Prod[F] = @{tpes.wrapProdVal("p")}
  }

  type Cop[F[_]] = @{tpes.copTpe}
  object Cop {
    def apply[F[_]](c: @{tpes.djK("F")}): Cop[F] = @{tpes.wrapCopVal("c")}
  }

  def deriving[TC[_], F[_]](implicit @{tpes.paramSig(List("TC", "F"), "t")}): AndXorDeriving[TC, Cop[F], Prod[F]] =
    @axoDeriving(tpes.copTpe, tpes.prodTpe)

  def derivingId[TC[_]](implicit @{tpes.paramSig("TC", "t")}): AndXorDeriving[TC, Cop[Id], Prod[Id]] = deriving[TC, Id]
}

object AndXor@{tpes.length} {
  def apply[@{tpes.tpeParams}]: AndXor@{tpes.length}[@{tpes.tpeParams}] =
    new AndXor@{tpes.length}[@{tpes.tpeParams}] {}
}
