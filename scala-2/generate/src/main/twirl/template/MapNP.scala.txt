@import andxor.Zipper
@import andxor.syntax._

@(z: Zipper[String], prod: Boolean)

  def map@{z.index + 1}[B](p: @{prod.fold((_: LS).prodTpe, (_: LS).prod)(z.toList)})(f: @{prod.fold(s"F[${z.focus}]", z.focus)} => @{prod.fold(s"F[B]", "B")}): @{prod.fold((_: LS).prodTpe, (_: LS).prod)(z.modify(_ => "B").toList)} = {
    @if(prod) {
    @{z.modify(_ => "B").toList.prodTpe}(mapN.map@{z.index + 1}(p.run)(f))
    } else {
    @{z.toList.tupleVals("a", "p", "    ")}
    @{z.toList.paramList("a")
      .updated(z.index, s"f(${z.toList.paramList("a")(z.index)})")
      .mkTuple}
    }
  }

  def mapAt[B](f: @{prod.fold(s"F[${z.focus}]", z.focus)} => @{prod.fold(s"F[B]", "B")})(p: @{prod.fold((_: LS).prodTpe, (_: LS).prod)(z.toList)})@{Some(z.lefts.toList).filter(_.nonEmpty).fold("")(
    _ => z.dummyImpl(prod))}: @{prod.fold((_: LS).prodTpe, (_: LS).prod)(z.modify(_ => "B").toList)} =
    @z.wrapProdOrTuple(prod)(s"mapN.map${z.index + 1}(p${prod.fold(".run", "")})(f)")
