@import andxor.Zipper
@import andxor.syntax._

@(z: Zipper[String], cop: Boolean)
@tpes = @{ z.toList }
@mod = @{ tpes.updated(z.index, "B") }
@B = @{ mod.toList(z.index) }

  def map@{z.index + 1}[@{B}](f: @{cop.fold(s"F[${z.focus}]", z.focus)} => @{cop.fold(s"F[${mod(z.index)}]", "B")}): @{cop.fold(mod.copTpe, mod.dj)} = @if(cop) {
    @z.wrapCopOrTuple(cop)(s"mapN.map${z.index + 1}(f)")
  } else {
    c@{z.lefts.foldRight(Some(z).filterNot(_.atEnd).fold("f")(_ => "_.leftMap(f)"))((_, a) => s"_.map(${a})").tail}
  }
