@import andxor.Zipper
@import andxor.syntax._

@(z: Zipper[String], cop: Boolean)
@tpes = @{ z.toList }
@mod = @{ tpes.updated(z.index, "B") }
@B = @{ mod.toList(z.index) }
@origT = { F[@z.focus] }
@modT = { F[@mod(z.index)] }

  def map@{z.index + 1}[@{B}](f: @{cop.fold(origT, z.focus)} => @{cop.fold(modT, "B")}): @{cop.fold(mod.copTpe, mod.dj)} =
    @z.wrapCopOrTuple(cop)(s"mapN.map${z.index + 1}(${cop.fold("run", "c")})(f)")

  def mapAt[@{B}](f: @{cop.fold(origT, z.focus)} => @{cop.fold(modT, "B")})@{Some(z.lefts.toList).filter(_.nonEmpty).fold("")(
    _ => z.dummyImpl(cop))}: @{cop.fold(mod.copTpe, mod.dj)} =
    @z.wrapCopOrTuple(cop)(s"mapN.map${cop.fold("At(f)(run)", s"${z.index + 1}(c)(f)")}")
